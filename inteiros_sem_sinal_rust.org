:PROPERTIES:
:ID:       5fc6ede8-8ce5-4e88-a696-e65ed8faf72e
:END:
#+title: Inteiros sem Sinal (Rust)
#+date: [2023-11-14 ter 05:11]
#+filetags: :rust:type:primitive:unsigned:integer:
- tags :: [[id:92097d09-7090-4583-87e3-db4f75e8b292][Tipos Primitivos (Rust)]]
- source :: [[https://doc.rust-lang.org/rust-by-example/primitives.html][Primitives - Rust By Example]], [[https://doc.rust-lang.org/std/#primitives][Primitive Types - std Crate]]

São números inteiros que podem ser apenas positivos.

* Declaração
Diferentes formas que podemos declarar os números inteiros sem sinal.

** Literal sem notação
#+begin_src rust :noweb yes :results verbatim
let num1: u8 = 123;
let num2: u16 = 456;
let num3: u32 = 789;
let num4: u64 = 800000;
let num5: u128 = 160_000_000;
let num6: usize = 888;

<<show_results>>
#+end_src

#+RESULTS:
: num1: u8 = 123
: num2: u16 = 456
: num3: u32 = 789
: num4: u64 = 800000
: num5: u128 = 160000000
: num6: usize = 888

** Literal com notação hexadecimal
#+begin_src rust :noweb yes :results verbatim
let num1: u8 = 0xFF;
let num2: u16 = 0xFFFF;
let num3: u32 = 0xFFFFFFFF;
let num4: u64 = 0xFFFFFFFFFFFFFFFF;
let num5: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
let num6: usize = 0xFFFFFFFF;

<<show_results>>
#+end_src

#+RESULTS:
: num1: u8 = 255
: num2: u16 = 65535
: num3: u32 = 4294967295
: num4: u64 = 18446744073709551615
: num5: u128 = 340282366920938463463374607431768211455
: num6: usize = 4294967295

** Literal com notação binária
#+begin_src rust :noweb yes :results verbatim
let num1: u8 = 0b01;
let num2: u16 = 0b10;
let num3: u32 = 0b11;
let num4: u64 = 0b100;
let num5: u128 = 0b101;
let num6: usize = 0b110;

<<show_results>>
#+end_src

#+RESULTS:
: num1: u8 = 1
: num2: u16 = 2
: num3: u32 = 3
: num4: u64 = 4
: num5: u128 = 5
: num6: usize = 6

** Literal com notação binária
#+begin_src rust :noweb yes :results verbatim
let num1: u8 = 0o001;
let num2: u16 = 0o002;
let num3: u32 = 0o004;
let num4: u64 = 0o006;
let num5: u128 = 0o0012;
let num6: usize = 0o024;

<<show_results>>
#+end_src

#+RESULTS:
: num1: u8 = 1
: num2: u16 = 2
: num3: u32 = 4
: num4: u64 = 6
: num5: u128 = 10
: num6: usize = 20

** Literal com sufixo de tipo
#+begin_src rust :noweb yes :results verbatim
let num1 = 1u8;
let num2 = 0x02u16;
let num3 = 0b11u32;
let num4 = 0o52u64;
let num5 = 100_000u128;
let num6 = 0x123123usize;

<<show_results>>
#+end_src

#+RESULTS:
: num1: u8 = 1
: num2: u16 = 2
: num3: u32 = 3
: num4: u64 = 42
: num5: u128 = 100000
: num6: usize = 1192227

* Limites
Valores mínimos e máximos:

#+begin_src rust :results table :colnames '(type min max)
println!("u8, {:e}, {:e}", u8::MIN, u8::MAX);
println!("u16, {:e}, {:e}", u16::MIN, u16::MAX);
println!("u32, {:e}, {:e}", u32::MIN, u32::MAX);
println!("u64, {:e}, {:e}", u64::MIN, u64::MAX);
println!("u128, {:e}, {:e}", u128::MIN, u128::MAX);
println!("usize, {:e}, {:e}", usize::MIN, usize::MAX);
#+end_src

#+RESULTS:
| type  | min |                    max |
|-------+-----+------------------------|
| u8    | 0.0 |                  255.0 |
| u16   | 0.0 |                65535.0 |
| u32   | 0.0 |           4294967295.0 |
| u64   | 0.0 | 1.8446744073709552e+19 |
| u128  | 0.0 |  3.402823669209385e+38 |
| usize | 0.0 | 1.8446744073709552e+19 |

* Códigos
#+name: show_results
#+begin_src rust :exports code
fn type_of<T>(_: &T) -> &'static str {
    std::any::type_name::<T>()
}

println!("num1: {} = {:?}", type_of(&num1), num1);
println!("num2: {} = {:?}", type_of(&num2), num2);
println!("num3: {} = {:?}", type_of(&num3), num3);
println!("num4: {} = {:?}", type_of(&num4), num4);
println!("num5: {} = {:?}", type_of(&num5), num5);
println!("num6: {} = {:?}", type_of(&num6), num6);
#+end_src
