:PROPERTIES:
:ID:       a3c9916f-c6e9-4776-a385-7c3b0320ce6f
:END:
#+title: Convertendo Strings (Rust)
#+date: [2024-01-15 seg 01:16]
- tags :: [[id:1881cbde-ea1b-4b05-8e21-1d752db63b68][Conversão (Rust)]]
- source :: [[https://doc.rust-lang.org/stable/rust-by-example/conversion/string.html][To and from Strings - Rust By Example]]

* Convertendo para String
Podemos converter qualquer tipo para ~String~ implementando o ~trait~ ~ToString~ para o tipo.

Ao invés de fazer isso diretamente, você pode implementar o ~trait~ ~fmt::Display~ que já providencia o ~ToString~ e também possibilita você usá-lo ao printar.

#+begin_src rust
use std::fmt;

struct Circle {
    radius: i32
}

impl fmt::Display for Circle {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Circle of radius {}", self.radius)
    }
}

fn main() {
    let circle = Circle { radius: 6 };
    println!("{}", circle.to_string());
}
#+end_src

#+RESULTS:
: Circle of radius 6

* Convertendo de uma String
Podemos converter uma ~String~ para outro tipo utilizando a função ~parse~, especificando o tipo ou inferindo o tipo.

Isso só irá funcionar se o tipo destinado implementa o ~trait~ ~FromStr~.

#+begin_src rust
fn main() {
    let parsed: i32 = "5".parse().unwrap();
    let turbo_parsed = "10".parse::<i32>().unwrap();

    let sum = parsed + turbo_parsed;
    println!("Sum: {:?}", sum);
}
#+end_src

#+RESULTS:
: Sum: 15
