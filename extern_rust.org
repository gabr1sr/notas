:PROPERTIES:
:ID:       c500f258-21e8-4765-9e2b-4952aef05792
:END:
#+title: Extern (Rust)
#+date: [2024-02-28 Wed 15:38]
- tags :: [[id:8c21413f-6d90-49cb-bd79-724e87ecc027][Funções (Rust)]]
- source :: [[https://doc.rust-lang.org/reference/items/external-blocks.html][External blocks - The Rust Reference]], [[https://doc.rust-lang.org/reference/items/external-blocks.html#variadic-functions][Variadic functions - The Rust Reference]], [[https://doc.rust-lang.org/reference/items/functions.html#extern-function-qualifier][Extern function qualifier - The Rust Reference]]

  * Extern
O qualificador de função ~extern~ possibilita providenciar definições de função que podem ser chamadas com uma ABI particular:

#+begin_src rust
extern "ABI" fn foo() { /* ... */ }
#+end_src

Elas geralmente são usadas em conjunto com um blocos externos, que podem providenciar declaração de funções que podem ser usadas para chamar funções sem providenciar sua definição:

#+begin_src rust
extern "ABI" {
    fn foo(); /* sem corpo */
}

unsafe { foo() }
#+end_src

Quando o qualificador ~extern~ é omitido, a ABI ~"Rust"~ é usada por padrão. Exemplo:

#+begin_src rust
fn foo() {}
#+end_src

É o mesmo que:

#+begin_src rust
extern "Rust" fn foo() {}
#+end_src

Funções podem ser chamadas por códigos externos e usar uma ABI que difere do Rust permite, por exemplo, providenciar funções que podem ser chamadas de outras linguagens como C:

#+begin_src rust
// Declara uma função com a ABI "C"
extern "C" fn new_i32() -> i32 { 0 }

// Declara uma função com a ABI "stdcall"
extern "stdcall" fn new_i32_stdcall() -> i32 { 0 }
#+end_src

Assim como os blocos externos, quando o ~extern~ é usado, mas a ~"ABI"~ é omitida, a ABI padrão utilizada é ~"C"~.

#+begin_src rust
extern fn new_i32() -> i32 { 0 }
let fptr: extern fn() -> i32 = new_i32;
#+end_src

É equivalente a:

#+begin_src rust
extern "C" fn new_i32() -> i32 { 0 }
let fptr: extern "C" fn() -> i32 = new_i32;
#+end_src

** Funções Variádicas
Funções dentro de blocos externos podem ser variádicas especificando ~...~ como último argumento.

Para isso funcionar, deve haver pelo menos um parâmetro antes do parâmetro variádico.

Ele pode ser opcionalmente especificado com um identificador:

#+begin_src rust
extern "C" {
    fn foo(x: i32, ...); // sem identificador
    fn with_name(format: *const u8, args: ...); // com identificador
}
#+end_src

** ABIs Suportadas
- Rust
- C
- system
- cdecl
- stdcall
- win64
- sysv64
- aapcs
- fastcall
- vectorcall
- thiscall
- eficall

