:PROPERTIES:
:ID:       827bb862-e40e-4ff2-8565-ec129098516a
:END:
#+title: Bytes (Solidity)
#+date: [2023-12-07 qui 22:57]
- tags :: [[id:6c7fd246-3500-487d-9e14-374e1417f8f4][Tipos Básicos (Solidity)]]
- source :: [[https://updraft.cyfrin.io/courses/solidity/simple-storage/solidity-basic-types?lesson_format=transcript][Updraft Cyfrin | Basic variable types]], [[https://docs.soliditylang.org/en/latest/types.html#fixed-size-byte-arrays][Solidity Docs | Fixed-size byte arrays]], [[https://docs.soliditylang.org/en/latest/types.html#dynamically-sized-byte-array][Solidity Docs | Dynamically-sized byte array]]

Em Solidity, os bytes são declarados com a palavra-chave ~bytes~ sozinha ou ~bytes~ mais o número de bytes na frente;

O número de bytes pode ser: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ou 32.

O menor valor é 0 e o maior valor é ~(2^(bytes * 8)) - 1~.

* Array de bytes de tamanho fixo
Quando especificamos um número depois da palavra-chave ~bytes~, estamos criando um byte array de tamanho fixo.

#+begin_src solidity
// SPDX-License-Identifier: GPLv3
pragma solidity ^0.8.0;

contract FixedSizeByteArrayExample {
    bytes32 value1 = "hello";
    bytes32 value2 = bytes32(uint256(0xffff));
    bytes32 value3 = "\xff\xff";
    bytes32 maxValue = bytes32(type(uint256).max);
    bytes32 minValue = bytes32(type(uint256).min);
    bytes32 defaultValueZero;

    function bytes32Function() public pure returns (bytes32) {
	return "\xde\xad\xbe\xef";
    }
}
#+end_src

* Array de bytes de tamanho dinâmico
Quando não especificamos um número depois da palavra-chave ~bytes~, estamos criando um byte array de tamanho dinâmico.

#+begin_src solidity
// SPDX-License-Identifier: GPLv3
pragma solidity ^0.8.0;

contract DynamicSizeByteArrayExample {
    bytes value1 = "hello";
    bytes value2 = bytes("world");
    bytes value3 = abi.encodePacked("hello world");

    function bytesFunction() public pure returns (bytes memory) {
	return hex"deadbeef";
    }
}
#+end_src
